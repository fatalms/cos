def Bfilter(image_in, D0, N):

# Фильтр Баттерворта, фильтрация в частотной области

# Ввод - это серое изображение, которое необходимо отфильтровать, частота среза фильтра Баттерворта - D0, порядок - N

# Результат - изображение в оттенках серого после фильтрации.

 
[m, n] = size(image_in);

P = 2 * m;

Q = 2 * n;

 
fp = zeros(P, Q);

# Залейте изображение 0 и умножьте его на (-1) ^ (x + y), чтобы переместиться в центр преобразования.

for i = 1 : m

for j = 1 : n

fp(i, j) = double(image_in(i, j)) * (-1)^(i+j);

end

end

# Выполните преобразование Фурье на заполненном изображении

F1 = fft2(fp);

 
# Сгенерировать функцию фильтра Баттерворта с центром в (m + 1, n + 1)

Bw = zeros(P, Q);

a = D0^(2 * N);

for u = 1 : P

for v = 1 : Q

temp = (u-(m+1.0))^2 + (v-(n+1.0))^2;

Bw(u, v) = 1 / (1 + (temp^N) / a);

end

end

 
# Для фильтрации

G = F1 .* Bw;

 
# Обратное преобразование Фурье

gp = ifft2(G);

 
# Обработанное изображение

image_out = zeros(m, n, 'uint8');

gp = real(gp);

g = zeros(m, n);

for i = 1 : m

for j = 1 : n

g(i, j) = gp(i, j) * (-1)^(i+j);

 
end

end

mmax = max(g(:));

mmin = min(g(:));

range = mmax-mmin;

for i = 1 : m

for j = 1 : n

image_out(i,j) = uint8(255 * (g(i, j)-mmin) / range);

end

end

 
end